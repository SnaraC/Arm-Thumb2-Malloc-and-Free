


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    2 00000000                 THUMB
    3 00000000         
    4 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    5 00000000         ; System Call Table
    6 00000000 20001000 
                       HEAP_TOP
                               EQU              0x20001000
    7 00000000 20004FE0 
                       HEAP_BOT
                               EQU              0x20004FE0
    8 00000000 00004000 
                       MAX_SIZE
                               EQU              0x00004000  ; 16KB = 2^14
    9 00000000 00000020 
                       MIN_SIZE
                               EQU              0x00000020  ; 32B  = 2^5
   10 00000000         
   11 00000000 20006800 
                       MCB_TOP EQU              0x20006800  ; 2^10B = 1K Space
   12 00000000 20006BFE 
                       MCB_BOT EQU              0x20006BFE
   13 00000000 00000002 
                       MCB_ENT_SZ
                               EQU              0x00000002  ; 2B per entry
   14 00000000 00000200 
                       MCB_TOTAL
                               EQU              512         ; 2^9 = 512 entries
                                                            
   15 00000000         
   16 00000000 FFFFFFFF 
                       INVALID EQU              -1          ; an invalid id
   17 00000000         
   18 00000000         ;
   19 00000000         ; Each MCB Entry
   20 00000000         ; FEDCBA9876543210
   21 00000000         ; 00SSSSSSSSS0000U     S bits are used for Heap size, U=
                       1 Used U=0 Not Used
   22 00000000         
   23 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   24 00000000         ; Memory Control Block Initialization
   25 00000000         ; void _heap_init( )
   26 00000000         ; this routine must be called from Reset_Handler in star
                       tup_TM4C129.s
   27 00000000         ; before you invoke main( ) in driver_keil
   28 00000000                 EXPORT           _heap_init
   29 00000000         _heap_init
   30 00000000         ; you must correctly set the value of each MCB block
   31 00000000         ; complete your code
   32 00000000 E92D 5FFC       PUSH             {r2-r12,lr}
   33 00000004 4AB6            LDR              R2, =MCB_TOP
   34 00000006 4DB7            LDR              R5, =MCB_BOT
   35 00000008 4EB7            LDR              R6, =HEAP_TOP
   36 0000000A F8DF 82E0       LDR              R8, =HEAP_BOT
   37 0000000E F44F 4380       LDR              R3, =MAX_SIZE
   38 00000012 F842 3B04       STR              R3, [R2], #4



ARM Macro Assembler    Page 2 


   39 00000016 E7FF            B                loopMCB
   40 00000018         
   41 00000018         loopMCB                              ; initialize MCB ad
                                                            dress 
   42 00000018 42AA            CMP              R2, R5
   43 0000001A D004            BEQ              loopheap    ;after done move to
                                                             heap initialize lo
                                                            op
   44 0000001C F04F 0400       MOV              R4, #0
   45 00000020 F802 4B01       STRB             r4, [r2], #1
   46 00000024 E7F8            B                loopMCB
   47 00000026         
   48 00000026         loopheap                             ; initialize heap a
                                                            ddress
   49 00000026 4546            CMP              R6, R8
   50 00000028 D004            BEQ              end         ;after done finish 
                                                            the heap init funct
                                                            ion 
   51 0000002A F04F 0400       MOV              R4, #0
   52 0000002E F806 4B01       STRB             r4, [r6], #1
   53 00000032 E7F8            B                loopheap
   54 00000034         
   55 00000034         end
   56 00000034 E8BD 5FFC       POP{r2-r12,lr}
   57 00000038 4770            BX               lr          ; branch to main
   58 0000003A         
   59 0000003A         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   60 0000003A         ; Kernel Memory Allocation
   61 0000003A         ; void* _k_alloc( int size )
   62 0000003A                 EXPORT           _kalloc
   63 0000003A         _kalloc
   64 0000003A         ; complete your code
   65 0000003A E92D 5FFE       push             {r1-r12, lr}
   66 0000003E 49A8            LDR              R1, =MCB_TOP
   67 00000040 4AA8            LDR              R2, =MCB_BOT
   68 00000042 E7FF            B                _ralloc
   69 00000044         
   70 00000044         _ralloc                              ; recursive functio
                                                            n for kalloc
   71 00000044 EBA2 0301       SUB              R3, R2, R1
   72 00000048 F04F 0402       LDR              R4, =MCB_ENT_SZ
   73 0000004C 4423            ADD              R3, R3, R4  ; entire mcb
   74 0000004E F04F 0402       MOV              R4, #2
   75 00000052 FB93 F4F4       SDIV             R4, R3, R4  ; half val mcb
   76 00000056 EB04 0501       ADD              R5, R4, R1  ; address midpoint
   77 0000005A 680E            LDR              R6, [R1]    ; value of mcb top 
                                                            
   78 0000005C F016 0F01       TST              R6, #1      ; check if it use o
                                                            r not
   79 00000060 D003            BEQ              _checkUnused ;if LSB is zero
   80 00000062 D107            BNE              _checkUsed  ; if LSB is one
   81 00000064         
   82 00000064 E8BD 5FFE 
                       _rallocPop
                               pop              {r1-r12,lr}
   83 00000068 4770            BX               lr
   84 0000006A         
   85 0000006A         _checkUnused                         ; check if the spac



ARM Macro Assembler    Page 3 


                                                            e is available or u
                                                            nused
   86 0000006A F011 0F01       TST              R1, #1
   87 0000006E 42B0            CMP              R0, R6
   88 00000070 DB71            BLT              splitvalue  ;split value to the
                                                             right buddy 
   89 00000072 D078            BEQ              setvalue    ;set value at addre
                                                            ss
   90 00000074         
   91 00000074         _checkUsed                           ; check if the spac
                                                            e is used or unavai
                                                            lable
   92 00000074 42B0            CMP              R0, R6
   93 00000076 DB00            BLT              checkLeft
   94 00000078 DC21            BGT              checkRight
   95 0000007A         
   96 0000007A         checkLeft                            ;check left buddy
   97 0000007A 46B0            MOV              R8, R6
   98 0000007C 682E            LDR              R6, [R5]
   99 0000007E         
  100 0000007E 682F            LDR              R7, [R5]
  101 00000080 F1A7 0701       SUB              R7, R7, #1
  102 00000084 4287            CMP              R7, R0
  103 00000086 D005            BEQ              Rightdivision
  104 00000088         
  105 00000088 42B0            CMP              R0, R6
  106 0000008A BF08 462A       MOVEQ            R2, R5
  107 0000008E D06F            BEQ              setvalueRight
  108 00000090 DB25            BLT              setMidtoBot
  109 00000092 DC1C            BGT              setMidtoTop
  110 00000094         
  111 00000094         Rightdivision
  112 00000094 F04F 0410       MOV              R4, #16
  113 00000098 FB97 F7F4       SDIV             R7, R7, R4
  114 0000009C 443D            ADD              R5, R5, R7
  115 0000009E F105 0501       ADD              R5, #1
  116 000000A2 F8D5 8000       LDR              R8, [R5]
  117 000000A6 F018 0F01       TST              R8, #1
  118 000000AA BF08 462A       MOVEQ            R2, R5
  119 000000AE 682E            LDR              R6, [R5]
  120 000000B0 D05E            BEQ              setvalueRight
  121 000000B2         
  122 000000B2 42B0            CMP              R0, R6
  123 000000B4 BF08 462A       MOVEQ            R2, R5
  124 000000B8 D05A            BEQ              setvalueRight
  125 000000BA DB10            BLT              setMidtoBot
  126 000000BC DC07            BGT              setMidtoTop
  127 000000BE         
  128 000000BE         
  129 000000BE         checkRight                           ;check right buddy
  130 000000BE 46B0            MOV              R8, R6
  131 000000C0 682E            LDR              R6, [R5]
  132 000000C2 42B0            CMP              R0, R6
  133 000000C4 BF08 4629       MOVEQ            R1, R5
  134 000000C8 D04D            BEQ              setvalue
  135 000000CA DB08            BLT              setMidtoBot
  136 000000CC DCFF            BGT              setMidtoTop
  137 000000CE         
  138 000000CE         setMidtoTop                          ;move the mid addre



ARM Macro Assembler    Page 4 


                                                            ss to top/R1
  139 000000CE F1A8 0801       SUB              R8, R8, #1
  140 000000D2 EA4F 0848       LSL              R8, #1
  141 000000D6         
  142 000000D6 45B0            CMP              R8, R6
  143 000000D8 D023            BEQ              checkMidRight
  144 000000DA         
  145 000000DA 4629            MOV              R1, R5
  146 000000DC E7B2            b                _ralloc
  147 000000DE         
  148 000000DE         setMidtoBot                          ; move the mid addr
                                                            ess to bottom/R2
  149 000000DE F1A8 0801       SUB              R8, R8, #1
  150 000000E2 EA4F 0848       LSL              R8, #1
  151 000000E6         
  152 000000E6 45B0            CMP              R8, R6
  153 000000E8 D001            BEQ              checkMid
  154 000000EA         
  155 000000EA 462A            MOV              R2, R5
  156 000000EC E7AA            b                _ralloc
  157 000000EE         
  158 000000EE         
  159 000000EE         checkMid                             ;check midpoint or 
                                                            the right buddy of 
                                                            the top to see if i
                                                            t available
  160 000000EE EA4F 0858       LSR              R8, #1
  161 000000F2 F108 0801       ADD              R8, R8, #1
  162 000000F6 B448            push             {r3,r6}
  163 000000F8 462E            MOV              r6, r5
  164 000000FA EBA5 0301       SUB              r3, r5, r1
  165 000000FE F04F 0402       LDR              R4, =MCB_ENT_SZ
  166 00000102 4423            ADD              r3, r3, r4
  167 00000104 F04F 0402       MOV              R4, #2
  168 00000108 FB93 F4F4       SDIV             R4, R3, R4
  169 0000010C EB04 0501       ADD              R5, R4, R1
  170 00000110 682B            LDR              r3, [r5]
  171 00000112 4543            CMP              R3, R8
  172 00000114 BF08 4631       MOVEQ            R1, R6
  173 00000118 4543            CMP              R3, R8
  174 0000011A BF18 4632       MOVNE            R2, R6
  175 0000011E BC48            pop              {r3,r6}
  176 00000120 E790            b                _ralloc
  177 00000122         
  178 00000122         checkMidRight                        ;check midpoint or 
                                                            the left buddy of t
                                                            he mid to see if it
                                                             available
  179 00000122 EA4F 0858       LSR              R8, #1
  180 00000126 F108 0801       ADD              R8, R8, #1
  181 0000012A B448            push             {r3,r6}
  182 0000012C 462E            MOV              r6, r5
  183 0000012E EBA5 0301       SUB              r3, r5, r1
  184 00000132 F04F 0402       LDR              R4, =MCB_ENT_SZ
  185 00000136 4423            ADD              r3, r3, r4
  186 00000138 F04F 0402       MOV              R4, #2
  187 0000013C FB93 F4F4       SDIV             R4, R3, R4
  188 00000140 EB04 0501       ADD              R5, R4, R1
  189 00000144 682B            LDR              r3, [r5]



ARM Macro Assembler    Page 5 


  190 00000146 4543            CMP              R3, R8
  191 00000148 BF08 4632       MOVEQ            R2, R6
  192 0000014C 4543            CMP              R3, R8
  193 0000014E BF18 4631       MOVNE            R1, R6
  194 00000152 BC48            pop              {r3,r6}
  195 00000154 E776            b                _ralloc
  196 00000156         
  197 00000156         
  198 00000156         splitvalue                           ;splitvalue into tw
                                                            o left and right bu
                                                            ddy
  199 00000156 F04F 0802       MOV              R8, #2
  200 0000015A FB96 F6F8       SDIV             R6, R6, R8
  201 0000015E 600E            STR              R6, [R1]
  202 00000160 602E            STR              R6, [R5]
  203 00000162 462A            MOV              R2, R5
  204 00000164 E76E            B                _ralloc
  205 00000166         
  206 00000166         setvalue                             ; set value at fitt
                                                            ed address
  207 00000166 F106 0601       ADD              R6, R6, #1
  208 0000016A 600E            STR              R6, [R1]
  209 0000016C 6006            STR              R6, [R0]    ; return value shou
                                                            ld be saved into r0
                                                            
  210 0000016E E779            B                _rallocPop  ; return to ralloc 
                                                            to main
  211 00000170         
  212 00000170         setvalueRight                        ; set the value at 
                                                            the right buddy if 
                                                            left is not availab
                                                            le
  213 00000170 F106 0601       ADD              R6, R6, #1
  214 00000174 6016            STR              R6, [R2]
  215 00000176 6006            STR              R6, [R0]    ; return value shou
                                                            ld be saved into r0
                                                            
  216 00000178 E774            B                _rallocPop  ; return to ralloc 
                                                            to main
  217 0000017A         
  218 0000017A         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  219 0000017A         ; Kernel Memory De-allocation
  220 0000017A         ; void *_kfree( void *ptr ) 
  221 0000017A                 EXPORT           _kfree
  222 0000017A         _kfree
  223 0000017A         ; complete your code
  224 0000017A E92D 5FFE       push             {r1-r12, lr}
  225 0000017E 4958            LDR              R1, =MCB_TOP
  226 00000180 4A58            LDR              R2, =MCB_BOT
  227 00000182 E7FF            B                _rfree
  228 00000184         
  229 00000184         ; return value should be saved into r0 
  230 00000184         
  231 00000184         _rfree                               ; rfree recursive f
                                                            unction 
  232 00000184 680B            LDR              R3, [R1]
  233 00000186 F5B3 3F80       CMP              R3, #0x10000
  234 0000018A DC06            BGT              lsrR3



ARM Macro Assembler    Page 6 


  235 0000018C F5B3 7F80       CMP              R3, #0x100
  236 00000190 DB09            BLT              lslR3
  237 00000192 F013 0F01       TST              R3, #1
  238 00000196 D00C            BEQ              _Unused
  239 00000198 D10C            BNE              _Used
  240 0000019A         
  241 0000019A         lsrR3
  242 0000019A EA4F 2313       LSR              R3, #8
  243 0000019E F013 0F01       TST              R3, #1
  244 000001A2 D006            BEQ              _Unused
  245 000001A4 D106            BNE              _Used
  246 000001A6         
  247 000001A6         lslR3
  248 000001A6 EA4F 2303       LSL              R3, #8
  249 000001AA F013 0F01       TST              R3, #1
  250 000001AE D000            BEQ              _Unused
  251 000001B0 D100            BNE              _Used
  252 000001B2         
  253 000001B2         _Unused                              ;space unused we mo
                                                            ve on to the next a
                                                            ddress
  254 000001B2 E07D            B                moveOn
  255 000001B4         
  256 000001B4         _Used                                ;space in use we ch
                                                            eck the value to se
                                                            e if it is the righ
                                                            t one to free
  257 000001B4 F1A3 0301       SUB              R3, R3, #1
  258 000001B8 4298            CMP              R0, R3
  259 000001BA D179            BNE              moveOn
  260 000001BC         
  261 000001BC 600B            STR              R3, [R1]
  262 000001BE F04F 0402       LDR              R4, =MCB_ENT_SZ
  263 000001C2 4699            MOV              R9, R3
  264 000001C4 4423            ADD              R3, R3, R4
  265 000001C6 F04F 0410       MOV              R4, #16
  266 000001CA FB93 F6F4       SDIV             R6, R3, R4
  267 000001CE 460D            MOV              R5, R1
  268 000001D0         
  269 000001D0 EB05 0A06       ADD              R10, R5, R6
  270 000001D4 F105 0A01       ADD              R10, R5, #1
  271 000001D8         
  272 000001D8 EBA5 0806       SUB              R8, R5, R6
  273 000001DC F1A8 0801       SUB              R8, R8, #1
  274 000001E0         
  275 000001E0 F8DA 7000       LDR              R7, [R10]
  276 000001E4 F5B7 3F80       CMP              R7, #0x10000
  277 000001E8 DC09            BGT              lslR7
  278 000001EA 454F            CMP              R7, R9
  279 000001EC D01B            BEQ              _MergeBuddy
  280 000001EE F8D8 7000       LDR              R7, [R8]
  281 000001F2 F5B7 3F80       CMP              R7, #0x10000
  282 000001F6 DC02            BGT              lslR7
  283 000001F8 454F            CMP              R7, R9
  284 000001FA D009            BEQ              _MergeBuddyLeft
  285 000001FC D16C            BNE              END
  286 000001FE         
  287 000001FE         lslR7
  288 000001FE EA4F 2717       LSR              R7, #8



ARM Macro Assembler    Page 7 


  289 00000202 454F            CMP              R7, R9
  290 00000204 D00F            BEQ              _MergeBuddy
  291 00000206 F8D8 7000       LDR              R7, [R8]
  292 0000020A 454F            CMP              R7, R9
  293 0000020C D000            BEQ              _MergeBuddyLeft
  294 0000020E D163            BNE              END
  295 00000210         
  296 00000210         _MergeBuddyLeft                      ; merge left buddy
  297 00000210 682E            LDR              R6, [R5]
  298 00000212 680F            LDR              R7, [R1]
  299 00000214 F04F 0900       MOV              R9, #0
  300 00000218 443E            ADD              R6, R6, R7
  301 0000021A F8C8 6000       STR              R6, [R8]
  302 0000021E F8C1 9000       STR              R9, [R1]
  303 00000222 4641            MOV              R1, R8
  304 00000224 E011            B                RecursiveMerge
  305 00000226         
  306 00000226         _MergeBuddy                          ;merge right buddy
  307 00000226 682E            LDR              R6, [R5]
  308 00000228 680F            LDR              R7, [R1]
  309 0000022A F04F 0900       MOV              R9, #0
  310 0000022E 443E            ADD              R6, R6, R7
  311 00000230 F8C8 6000       STR              R6, [R8]
  312 00000234 F8C1 9000       STR              R9, [R1]
  313 00000238 4B29            LDR              r3, =MCB_TOP
  314 0000023A 4598            CMP              R8, R3
  315 0000023C DB01            BLT              donotmove
  316 0000023E 4641            MOV              R1, R8
  317 00000240 E003            B                RecursiveMerge
  318 00000242         
  319 00000242         donotmove                            ; if above or below
                                                             the mcb top and bo
                                                            t do not move anymo
                                                            re switch value for
                                                             another recursive 
                                                            merge
  320 00000242 600E            STR              R6, [R1]
  321 00000244 F8CA 9000       STR              R9, [R10]
  322 00000248 E7FF            B                RecursiveMerge
  323 0000024A         
  324 0000024A         RecursiveMerge                       ;recursive merge to
                                                             keep merging if th
                                                            e left and right sp
                                                            ace is the same siz
                                                            e until everything 
                                                            is merge
  325 0000024A F8D8 3000       LDR              r3, [r8]
  326 0000024E F04F 0402       LDR              R4, =MCB_ENT_SZ
  327 00000252 4699            MOV              R9, R3
  328 00000254 4423            ADD              R3, R3, R4
  329 00000256 F04F 0410       MOV              R4, #16
  330 0000025A FB93 F6F4       SDIV             R6, R3, R4
  331 0000025E         
  332 0000025E EB08 0A06       ADD              R10, R8, R6
  333 00000262 F10A 0A01       ADD              R10, R10, #1
  334 00000266         
  335 00000266 EBA8 0806       SUB              R8, R8, R6
  336 0000026A         
  337 0000026A F8D8 7000       LDR              R7, [R8]



ARM Macro Assembler    Page 8 


  338 0000026E F5B7 3F80       CMP              R7, #0x10000
  339 00000272 DCC4            BGT              lslR7
  340 00000274 454F            CMP              R7, R9
  341 00000276 4645            MOV              R5, R8
  342 00000278 D0CA            BEQ              _MergeBuddyLeft
  343 0000027A F8DA 7000       LDR              R7, [R10]
  344 0000027E F5B7 3F80       CMP              R7, #0x10000
  345 00000282 DCBC            BGT              lslR7
  346 00000284 2F64            CMP              R7, #100
  347 00000286 DB03            BLT              checkevenindex
  348 00000288 454F            CMP              R7, R9
  349 0000028A 4655            MOV              R5, R10
  350 0000028C D0CB            BEQ              _MergeBuddy
  351 0000028E         
  352 0000028E E023            B                END
  353 00000290         
  354 00000290         checkevenindex                       ; helper function t
                                                            o check the even in
                                                            dex
  355 00000290 F1AA 0A01       SUB              R10, R10, #1
  356 00000294 F8DA 7000       LDR              R7, [R10]
  357 00000298 454F            CMP              R7, R9
  358 0000029A 4655            MOV              R5, R10
  359 0000029C D0C3            BEQ              _MergeBuddy
  360 0000029E F8D8 7000       LDR              R7, [R8]
  361 000002A2 F5B7 3F80       CMP              R7, #0x10000
  362 000002A6 DCAA            BGT              lslR7
  363 000002A8 454F            CMP              R7, R9
  364 000002AA 4645            MOV              R5, R8
  365 000002AC D0B0            BEQ              _MergeBuddyLeft
  366 000002AE E013            B                END
  367 000002B0         
  368 000002B0         moveOn                               ; move to the next 
                                                            address
  369 000002B0 461D            MOV              R5, R3
  370 000002B2 F04F 0402       LDR              R4, =MCB_ENT_SZ
  371 000002B6 4425            ADD              R5, R5, R4
  372 000002B8 F04F 0410       MOV              R4, #16
  373 000002BC FB95 F6F4       SDIV             R6, R5, R4
  374 000002C0 4431            ADD              R1, R1, R6
  375 000002C2 F011 0F01       TST              R1, #1
  376 000002C6 BF08 1C49       ADDEQ            R1, R1, #1
  377 000002CA 680B            LDR              R3, [R1]
  378 000002CC 2B64            CMP              R3, #100
  379 000002CE DB00            BLT              moveoncheckevenorodd
  380 000002D0 E758            B                _rfree
  381 000002D2         
  382 000002D2         moveoncheckevenorodd
  383 000002D2 F1A1 0101       SUB              R1, R1, #1
  384 000002D6 E755            B                _rfree
  385 000002D8         
  386 000002D8         END
  387 000002D8 E8BD 5FFE       pop              {r1-r12,lr}
  388 000002DC 4770            BX               lr
                       
              00 00 20006800 
              20006BFE 
              20001000 
              20004FE0 



ARM Macro Assembler    Page 9 


Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\heap.d -o.\objects\heap.o -I.\RTE\_Target_1 -I"C:\Pro
gram Files\Keil\ARM\PACK\ARM\CMSIS\5.9.0\CMSIS\Core\Include" -I"C:\Program File
s\Keil\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129" --predefine="__EVAL
 SETA 1" --predefine="__UVISION_VERSION SETA 526" --predefine="_RTE_ SETA 1" --
predefine="TM4C129XNCZAD SETA 1" --list=.\listings\heap.lst heap.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 1 in file heap.s
   Uses
      None
Comment: .text unused
END 000002D8

Symbol: END
   Definitions
      At line 386 in file heap.s
   Uses
      At line 285 in file heap.s
      At line 294 in file heap.s
      At line 352 in file heap.s
      At line 366 in file heap.s

RecursiveMerge 0000024A

Symbol: RecursiveMerge
   Definitions
      At line 324 in file heap.s
   Uses
      At line 304 in file heap.s
      At line 317 in file heap.s
      At line 322 in file heap.s

Rightdivision 00000094

Symbol: Rightdivision
   Definitions
      At line 111 in file heap.s
   Uses
      At line 103 in file heap.s
Comment: Rightdivision used once
_MergeBuddy 00000226

Symbol: _MergeBuddy
   Definitions
      At line 306 in file heap.s
   Uses
      At line 279 in file heap.s
      At line 290 in file heap.s
      At line 350 in file heap.s
      At line 359 in file heap.s

_MergeBuddyLeft 00000210

Symbol: _MergeBuddyLeft
   Definitions
      At line 296 in file heap.s
   Uses
      At line 284 in file heap.s
      At line 293 in file heap.s
      At line 342 in file heap.s
      At line 365 in file heap.s




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

_Unused 000001B2

Symbol: _Unused
   Definitions
      At line 253 in file heap.s
   Uses
      At line 238 in file heap.s
      At line 244 in file heap.s
      At line 250 in file heap.s

_Used 000001B4

Symbol: _Used
   Definitions
      At line 256 in file heap.s
   Uses
      At line 239 in file heap.s
      At line 245 in file heap.s
      At line 251 in file heap.s

_checkUnused 0000006A

Symbol: _checkUnused
   Definitions
      At line 85 in file heap.s
   Uses
      At line 79 in file heap.s
Comment: _checkUnused used once
_checkUsed 00000074

Symbol: _checkUsed
   Definitions
      At line 91 in file heap.s
   Uses
      At line 80 in file heap.s
Comment: _checkUsed used once
_heap_init 00000000

Symbol: _heap_init
   Definitions
      At line 29 in file heap.s
   Uses
      At line 28 in file heap.s
Comment: _heap_init used once
_kalloc 0000003A

Symbol: _kalloc
   Definitions
      At line 63 in file heap.s
   Uses
      At line 62 in file heap.s
Comment: _kalloc used once
_kfree 0000017A

Symbol: _kfree
   Definitions
      At line 222 in file heap.s
   Uses
      At line 221 in file heap.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

Comment: _kfree used once
_ralloc 00000044

Symbol: _ralloc
   Definitions
      At line 70 in file heap.s
   Uses
      At line 68 in file heap.s
      At line 146 in file heap.s
      At line 156 in file heap.s
      At line 176 in file heap.s
      At line 195 in file heap.s
      At line 204 in file heap.s

_rallocPop 00000064

Symbol: _rallocPop
   Definitions
      At line 82 in file heap.s
   Uses
      At line 210 in file heap.s
      At line 216 in file heap.s

_rfree 00000184

Symbol: _rfree
   Definitions
      At line 231 in file heap.s
   Uses
      At line 227 in file heap.s
      At line 380 in file heap.s
      At line 384 in file heap.s

checkLeft 0000007A

Symbol: checkLeft
   Definitions
      At line 96 in file heap.s
   Uses
      At line 93 in file heap.s
Comment: checkLeft used once
checkMid 000000EE

Symbol: checkMid
   Definitions
      At line 159 in file heap.s
   Uses
      At line 153 in file heap.s
Comment: checkMid used once
checkMidRight 00000122

Symbol: checkMidRight
   Definitions
      At line 178 in file heap.s
   Uses
      At line 143 in file heap.s
Comment: checkMidRight used once
checkRight 000000BE




ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Symbol: checkRight
   Definitions
      At line 129 in file heap.s
   Uses
      At line 94 in file heap.s
Comment: checkRight used once
checkevenindex 00000290

Symbol: checkevenindex
   Definitions
      At line 354 in file heap.s
   Uses
      At line 347 in file heap.s
Comment: checkevenindex used once
donotmove 00000242

Symbol: donotmove
   Definitions
      At line 319 in file heap.s
   Uses
      At line 315 in file heap.s
Comment: donotmove used once
end 00000034

Symbol: end
   Definitions
      At line 55 in file heap.s
   Uses
      At line 50 in file heap.s
Comment: end used once
loopMCB 00000018

Symbol: loopMCB
   Definitions
      At line 41 in file heap.s
   Uses
      At line 39 in file heap.s
      At line 46 in file heap.s

loopheap 00000026

Symbol: loopheap
   Definitions
      At line 48 in file heap.s
   Uses
      At line 43 in file heap.s
      At line 53 in file heap.s

lslR3 000001A6

Symbol: lslR3
   Definitions
      At line 247 in file heap.s
   Uses
      At line 236 in file heap.s
Comment: lslR3 used once
lslR7 000001FE

Symbol: lslR7



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 287 in file heap.s
   Uses
      At line 277 in file heap.s
      At line 282 in file heap.s
      At line 339 in file heap.s
      At line 345 in file heap.s
      At line 362 in file heap.s

lsrR3 0000019A

Symbol: lsrR3
   Definitions
      At line 241 in file heap.s
   Uses
      At line 234 in file heap.s
Comment: lsrR3 used once
moveOn 000002B0

Symbol: moveOn
   Definitions
      At line 368 in file heap.s
   Uses
      At line 254 in file heap.s
      At line 259 in file heap.s

moveoncheckevenorodd 000002D2

Symbol: moveoncheckevenorodd
   Definitions
      At line 382 in file heap.s
   Uses
      At line 379 in file heap.s
Comment: moveoncheckevenorodd used once
setMidtoBot 000000DE

Symbol: setMidtoBot
   Definitions
      At line 148 in file heap.s
   Uses
      At line 108 in file heap.s
      At line 125 in file heap.s
      At line 135 in file heap.s

setMidtoTop 000000CE

Symbol: setMidtoTop
   Definitions
      At line 138 in file heap.s
   Uses
      At line 109 in file heap.s
      At line 126 in file heap.s
      At line 136 in file heap.s

setvalue 00000166

Symbol: setvalue
   Definitions
      At line 206 in file heap.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 89 in file heap.s
      At line 134 in file heap.s

setvalueRight 00000170

Symbol: setvalueRight
   Definitions
      At line 212 in file heap.s
   Uses
      At line 107 in file heap.s
      At line 120 in file heap.s
      At line 124 in file heap.s

splitvalue 00000156

Symbol: splitvalue
   Definitions
      At line 198 in file heap.s
   Uses
      At line 88 in file heap.s
Comment: splitvalue used once
35 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

HEAP_BOT 20004FE0

Symbol: HEAP_BOT
   Definitions
      At line 7 in file heap.s
   Uses
      At line 36 in file heap.s
Comment: HEAP_BOT used once
HEAP_TOP 20001000

Symbol: HEAP_TOP
   Definitions
      At line 6 in file heap.s
   Uses
      At line 35 in file heap.s
Comment: HEAP_TOP used once
INVALID FFFFFFFF

Symbol: INVALID
   Definitions
      At line 16 in file heap.s
   Uses
      None
Comment: INVALID unused
MAX_SIZE 00004000

Symbol: MAX_SIZE
   Definitions
      At line 8 in file heap.s
   Uses
      At line 37 in file heap.s
Comment: MAX_SIZE used once
MCB_BOT 20006BFE

Symbol: MCB_BOT
   Definitions
      At line 12 in file heap.s
   Uses
      At line 34 in file heap.s
      At line 67 in file heap.s
      At line 226 in file heap.s

MCB_ENT_SZ 00000002

Symbol: MCB_ENT_SZ
   Definitions
      At line 13 in file heap.s
   Uses
      At line 72 in file heap.s
      At line 165 in file heap.s
      At line 184 in file heap.s
      At line 262 in file heap.s
      At line 326 in file heap.s
      At line 370 in file heap.s

MCB_TOP 20006800

Symbol: MCB_TOP
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 11 in file heap.s
   Uses
      At line 33 in file heap.s
      At line 66 in file heap.s
      At line 225 in file heap.s
      At line 313 in file heap.s

MCB_TOTAL 00000200

Symbol: MCB_TOTAL
   Definitions
      At line 14 in file heap.s
   Uses
      None
Comment: MCB_TOTAL unused
MIN_SIZE 00000020

Symbol: MIN_SIZE
   Definitions
      At line 9 in file heap.s
   Uses
      None
Comment: MIN_SIZE unused
9 symbols
381 symbols in table
