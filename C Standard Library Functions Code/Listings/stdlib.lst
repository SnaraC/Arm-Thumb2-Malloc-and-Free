


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    2 00000000                 THUMB
    3 00000000         
    4 00000000         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    5 00000000         ; void _bzero( void *s, int n )
    6 00000000         ; Parameters
    7 00000000         ; s   - pointer to the memory location to zero-initializ
                       e
    8 00000000         ; n  - a number of bytes to zero-initialize
    9 00000000         ; Return value
   10 00000000         ;   none
   11 00000000                 EXPORT           _bzero
   12 00000000         _bzero
   13 00000000         ; r0 = s
   14 00000000         ; r1 = n
   15 00000000 E92D 5FFE       PUSH             {r1-r12,lr}
   16 00000004         ; you need to add some code here for part 1 implmentatio
                       n
   17 00000004         loop
   18 00000004 2900            CMP              r1, #0
   19 00000006 D006            BEQ              end_of_main
   20 00000008 F1A1 0101       SUB              r1, r1, #1
   21 0000000C F04F 0400       MOV              r4, #0
   22 00000010 F800 4B01       STRB             r4, [r0], #1
   23 00000014 E7F6            B                loop
   24 00000016         
   25 00000016 E8BD 5FFE 
                       end_of_main
                               POP              {r1-r12,lr}
   26 0000001A 4770            BX               lr
   27 0000001C         
   28 0000001C         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   29 0000001C         ; char* _strncpy( char* dest, char* src, int size )
   30 0000001C         ; Parameters
   31 0000001C         ;   dest  - pointer to the buffer to copy to
   32 0000001C         ; src  - pointer to the zero-terminated string to copy f
                       rom
   33 0000001C         ; size - a total of n bytes
   34 0000001C         ; Return value
   35 0000001C         ;   dest
   36 0000001C                 EXPORT           _strncpy
   37 0000001C         _strncpy
   38 0000001C         ; r0 = dest
   39 0000001C         ; r1 = src
   40 0000001C         ; r2 = size
   41 0000001C E92D 5FFE       PUSH             {r1-r12,lr}
   42 00000020         ; will add some code here after part 1 implmentation
   43 00000020         
   44 00000020         strncpy_loop
   45 00000020 2A00            CMP              r2, #0
   46 00000022 D006            BEQ              end_of_main1
   47 00000024 F1A2 0201       SUB              r2, r2, #1
   48 00000028 F811 3B01       LDRB             r3, [r1], #1
   49 0000002C F800 3B01       STRB             r3, [r0], #1
   50 00000030 E7F6            b                strncpy_loop
   51 00000032         



ARM Macro Assembler    Page 2 


   52 00000032         end_of_main1
   53 00000032 E8BD 5FFE       POP              {r1-r12,lr}
   54 00000036 4770            BX               lr
   55 00000038         
   56 00000038         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   57 00000038         ; void* _malloc( int size )
   58 00000038         ; Parameters
   59 00000038         ; size - #bytes to allocate
   60 00000038         ; Return value
   61 00000038         ;   void* a pointer to the allocated space
   62 00000038                 EXPORT           _malloc
   63 00000038         _malloc
   64 00000038         ; r0 = size
   65 00000038 E92D 5FFE       PUSH             {r1-r12,lr}
   66 0000003C         ; will add some code here after part 1 implmentation
   67 0000003C E8BD 5FFE       POP              {r1-r12,lr}
   68 00000040 4770            BX               lr
   69 00000042         
   70 00000042         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   71 00000042         ; void _free( void* addr )
   72 00000042         ; Parameters
   73 00000042         ; size - the address of a space to deallocate
   74 00000042         ; Return value
   75 00000042         ;   none
   76 00000042                 EXPORT           _free
   77 00000042         _free
   78 00000042         ; r0 = addr
   79 00000042 E92D 5FFE       PUSH             {r1-r12,lr}
   80 00000046         ; will add some code here after part 1 implmentation
   81 00000046 E8BD 5FFE       POP              {r1-r12,lr}
   82 0000004A 4770            BX               lr
                       
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\stdlib.d -o.\objects\stdlib.o -I.\RTE\_Target_1 -I"C:
\Program Files\Keil\ARM\PACK\ARM\CMSIS\5.9.0\CMSIS\Core\Include" -I"C:\Program 
Files\Keil\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129" --predefine="__
EVAL SETA 1" --predefine="__UVISION_VERSION SETA 526" --predefine="_RTE_ SETA 1
" --predefine="TM4C129XNCZAD SETA 1" --list=.\listings\stdlib.lst stdlib.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 1 in file stdlib.s
   Uses
      None
Comment: .text unused
_bzero 00000000

Symbol: _bzero
   Definitions
      At line 12 in file stdlib.s
   Uses
      At line 11 in file stdlib.s
Comment: _bzero used once
_free 00000042

Symbol: _free
   Definitions
      At line 77 in file stdlib.s
   Uses
      At line 76 in file stdlib.s
Comment: _free used once
_malloc 00000038

Symbol: _malloc
   Definitions
      At line 63 in file stdlib.s
   Uses
      At line 62 in file stdlib.s
Comment: _malloc used once
_strncpy 0000001C

Symbol: _strncpy
   Definitions
      At line 37 in file stdlib.s
   Uses
      At line 36 in file stdlib.s
Comment: _strncpy used once
end_of_main 00000016

Symbol: end_of_main
   Definitions
      At line 25 in file stdlib.s
   Uses
      At line 19 in file stdlib.s
Comment: end_of_main used once
end_of_main1 00000032

Symbol: end_of_main1
   Definitions
      At line 52 in file stdlib.s
   Uses
      At line 46 in file stdlib.s
Comment: end_of_main1 used once
loop 00000004

Symbol: loop



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 17 in file stdlib.s
   Uses
      At line 23 in file stdlib.s
Comment: loop used once
strncpy_loop 00000020

Symbol: strncpy_loop
   Definitions
      At line 44 in file stdlib.s
   Uses
      At line 50 in file stdlib.s
Comment: strncpy_loop used once
9 symbols
344 symbols in table
